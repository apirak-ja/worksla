import os
import requests
import urllib3
import json
import logging
import re
from typing import Optional, Dict, Any, List
from datetime import datetime
from dotenv import load_dotenv  # ‡πÄ‡∏û‡∏¥‡πà‡∏° import ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î .env file

# ANSI Color Codes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö terminal output
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    END = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    CYAN = '\033[96m'
    MAGENTA = '\033[95m'

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô SSL ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡∏á verify=False ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
logger.warning("SSL verification is disabled. This is insecure and should only be used in development environments.")

class OpenProjectClient:
    def __init__(self, base_url: str, api_key: str):
        self.base_url = base_url.rstrip('/')
        self.api_key = api_key
        self.session = requests.Session()
        self.session.headers.update({
            "Authorization": f"Basic {self.api_key}",
            "Content-Type": "application/json"
        })
        # ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á verify=False ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        self.session.verify = False
        logger.warning("Using insecure SSL verification (verify=False) for OpenProject API requests.")
        
        # Cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user names ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° performance
        self.user_cache = {}

    def get_work_package(self, work_package_id: int) -> Optional[Dict[str, Any]]:
        if not isinstance(work_package_id, int) or work_package_id <= 0:
            logger.error(f"Invalid work_package_id: {work_package_id}")
            return None

        url = f"{self.base_url}/work_packages/{work_package_id}"
        try:
            logger.info(f"Fetching work package {work_package_id} from {url}")
            response = self.session.get(url)
            response.raise_for_status()
            logger.info(f"Successfully fetched work package {work_package_id}")
            return response.json()
        except requests.exceptions.RequestException as e:
            logger.error(f"Failed to fetch work package {work_package_id}: {e}")
            return None

    def get_activities(self, work_package_id: int) -> Optional[List[Dict[str, Any]]]:
        url = f"{self.base_url}/work_packages/{work_package_id}/activities"
        try:
            logger.info(f"Fetching activities for work package {work_package_id}")
            response = self.session.get(url)
            response.raise_for_status()
            data = response.json()
            activities = data.get("_embedded", {}).get("elements", [])
            logger.info(f"Successfully fetched {len(activities)} activities")
            return activities
        except requests.exceptions.RequestException as e:
            logger.error(f"Failed to fetch activities for work_package {work_package_id}: {e}")
            return None

    def get_user_details(self, user_url: str) -> Optional[Dict[str, Any]]:
        if user_url.startswith("/cmms/api/v3"):
            user_url = f"https://hosp.wu.ac.th{user_url}"
        
        try:
            logger.info(f"Fetching user details from {user_url}")
            response = self.session.get(user_url)
            response.raise_for_status()
            logger.info("Successfully fetched user details")
            return response.json()
        except requests.exceptions.RequestException as e:
            logger.error(f"Failed to fetch user details from {user_url}: {e}")
            return None

    def get_user_name(self, user_link: Dict[str, Any]) -> str:
        """‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å user link ‡∏î‡πâ‡∏ß‡∏¢ caching"""
        if not user_link or not isinstance(user_link, dict):
            return "Unknown"
        
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ title ‡πÉ‡∏ô link ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        if 'title' in user_link:
            return user_link['title']
        
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ href ‡πÉ‡∏´‡πâ fetch ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡πÉ‡∏ä‡πâ cache)
        if 'href' in user_link:
            user_url = user_link['href']
            if user_url in self.user_cache:
                return self.user_cache[user_url]
            
            user_details = self.get_user_details(user_url)
            if user_details and 'name' in user_details:
                user_name = user_details['name']
                self.user_cache[user_url] = user_name
                return user_name
        
        return "Unknown"

    def get_custom_option_details(self, option_url: str) -> Optional[Dict[str, Any]]:
        if option_url.startswith("/cmms/api/v3"):
            option_url = f"https://hosp.wu.ac.th{option_url}"

        try:
            logger.info(f"Fetching custom option details from {option_url}")
            response = self.session.get(option_url)
            response.raise_for_status()
            logger.info("Successfully fetched custom option details")
            return response.json()
        except requests.exceptions.RequestException as e:
            logger.error(f"Failed to fetch custom option details from {option_url}: {e}")
            return None

def safe_get(data, *keys, default="N/A"):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
    try:
        for key in keys:
            if isinstance(data, dict) and key in data:
                data = data[key]
            else:
                return default
        return data if data is not None and data != "" else default
    except (KeyError, TypeError, AttributeError):
        return default

def format_date(date_str: str) -> str:
    """‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö MM/DD/YYYY HH:MM AM/PM ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ local timezone"""
    if not date_str or date_str == "N/A":
        return "N/A"
    try:
        # ‡πÅ‡∏õ‡∏•‡∏á ISO format ‡πÄ‡∏õ‡πá‡∏ô datetime (assume UTC)
        if date_str.endswith('Z'):
            dt = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
        else:
            dt = datetime.fromisoformat(date_str)
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô local time (Thailand +7)
        from datetime import timezone, timedelta
        thailand_tz = timezone(timedelta(hours=7))
        dt_local = dt.astimezone(thailand_tz)
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        return dt_local.strftime("%m/%d/%Y %I:%M %p")
    except Exception as e:
        logger.warning(f"Error formatting date {date_str}: {e}")
        return date_str

def clean_html(text: str) -> str:
    """‡∏•‡∏ö HTML tags ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á HTML entities"""
    if not text:
        return ""

    # ‡∏•‡∏ö HTML tags
    text = re.sub('<[^<]+?>', '', text)

    # ‡πÅ‡∏õ‡∏•‡∏á HTML entities
    text = text.replace('&nbsp;', ' ')
    text = text.replace('&lt;', '<')
    text = text.replace('&gt;', '>')
    text = text.replace('&amp;', '&')
    text = text.replace('&quot;', '"')
    text = text.replace('&#39;', "'")

    # ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏Å‡∏¥‡∏ô
    text = ' '.join(text.split())
    return text.strip()

def print_section_header(title: str, color: str = Colors.BLUE):
    """‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏µ"""
    print(f"\n{color}{'='*60}{Colors.END}")
    print(f"{color}{' '*((60-len(title))//2)}{title}{' '*((60-len(title))//2)}{Colors.END}")
    print(f"{color}{'='*60}{Colors.END}")

def print_subsection_header(title: str, color: str = Colors.CYAN):
    """‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏¢‡πà‡∏≠‡∏¢"""
    print(f"\n{color}{Colors.BOLD}{title}{Colors.END}")
    print(f"{color}{'-'*len(title)}{Colors.END}")

def print_key_value(key: str, value: str, key_color: str = Colors.YELLOW, value_color: str = Colors.END):
    """‡∏û‡∏¥‡∏°‡∏û‡πå key-value pair ‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏µ"""
    print(f"{key_color}{key}:{Colors.END} {value_color}{value}{Colors.END}")

def print_overview(work_package: Dict[str, Any]):
    """‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á Work Package"""
    print_section_header("üìã WORK PACKAGE OVERVIEW", Colors.GREEN)
    
    subject = safe_get(work_package, 'subject')
    status = safe_get(work_package, '_links', 'status', 'title')
    priority = safe_get(work_package, '_links', 'priority', 'title')
    assignee = safe_get(work_package, '_links', 'assignee', 'title')
    
    print(f"{Colors.BOLD}üìù Subject:{Colors.END} {subject}")
    print(f"{Colors.BOLD}üìä Status:{Colors.END} {Colors.GREEN if status == '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à' else Colors.YELLOW}{status}{Colors.END}")
    print(f"{Colors.BOLD}‚ö° Priority:{Colors.END} {Colors.RED if priority == 'High' else Colors.YELLOW}{priority}{Colors.END}")
    print(f"{Colors.BOLD}üë§ Assignee:{Colors.END} {Colors.CYAN}{assignee}{Colors.END}")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    created = format_date(safe_get(work_package, 'createdAt'))
    updated = format_date(safe_get(work_package, 'updatedAt'))
    print(f"{Colors.BOLD}üìÖ Created:{Colors.END} {created}")
    print(f"{Colors.BOLD}üîÑ Updated:{Colors.END} {updated}")

def print_work_package_details(work_package: Dict[str, Any]):
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Work Package ‡∏´‡∏•‡∏±‡∏Å"""
    print_section_header("üìã WORK PACKAGE DETAILS", Colors.BLUE)
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å
    print_subsection_header("üìä Basic Information")
    print_key_value("ID", safe_get(work_package, 'id'), Colors.CYAN)
    print_key_value("Subject", safe_get(work_package, 'subject'), Colors.BOLD)
    print_key_value("Type", safe_get(work_package, '_links', 'type', 'title'))
    print_key_value("Priority", safe_get(work_package, '_links', 'priority', 'title'))
    
    # Description
    description_raw = safe_get(work_package, 'description', 'raw')
    if description_raw and description_raw != "N/A":
        print_subsection_header("üìù Description")
        # ‡∏•‡∏ö HTML tags ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á description ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
        clean_desc = clean_html(description_raw)
        if len(clean_desc) > 150:
            # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏≤‡∏ß‡∏°‡∏≤‡∏Å ‡∏ï‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° ...
            lines = clean_desc[:150].split('\n')
            for line in lines[:3]:  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 3 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏£‡∏Å
                if line.strip():
                    print(f"{Colors.YELLOW}  {line.strip()}{Colors.END}")
            print(f"{Colors.YELLOW}  ... (truncated){Colors.END}")
        else:
            lines = clean_desc.split('\n')
            for line in lines:
                if line.strip():
                    print(f"{Colors.YELLOW}  {line.strip()}{Colors.END}")
    
    # ‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢
    print_subsection_header("üë• Assignment & Category")
    category = safe_get(work_package, '_links', 'category', 'title')
    assignee = safe_get(work_package, '_links', 'assignee', 'title')
    author = safe_get(work_package, '_links', 'author', 'title')
    
    if category != "N/A":
        print_key_value("Category", category)
    if assignee != "N/A":
        print_key_value("Assignee", assignee, Colors.CYAN)
    if author != "N/A":
        print_key_value("Author", author, Colors.CYAN)
    
    # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    print_subsection_header("üìÖ Timeline")
    created_at = format_date(safe_get(work_package, 'createdAt'))
    updated_at = format_date(safe_get(work_package, 'updatedAt'))
    
    print_key_value("Created", created_at, Colors.GREEN)
    print_key_value("Updated", updated_at, Colors.YELLOW)

def print_custom_fields_and_options(client: OpenProjectClient, work_package: Dict[str, Any]):
    """‡πÅ‡∏™‡∏î‡∏á Custom Fields ‡πÅ‡∏•‡∏∞ Custom Options"""
    custom_fields = {}
    custom_options = {}
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å customField ‡∏õ‡∏Å‡∏ï‡∏¥
    for key, value in work_package.items():
        if key.startswith("customField"):
            custom_fields[key] = value
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å _links
    if "_links" in work_package:
        for key, link in work_package["_links"].items():
            if key.startswith("customField"):
                if "href" in link and "/custom_options/" in link["href"]:
                    option_details = client.get_custom_option_details(link["href"])
                    if option_details:
                        custom_options[key] = {
                            "title": option_details.get("title", ""),
                            "value": option_details.get("value", "")
                        }
                elif "title" in link:
                    custom_fields[key] = link["title"]
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Custom Fields
    if custom_fields:
        print_section_header("üè∑Ô∏è CUSTOM FIELDS", Colors.MAGENTA)
        field_names = {
            "customField4": "Custom Field 4",
            "customField6": "üè¢ ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á",
            "customField8": "üë§ ‡πÅ‡∏à‡πâ‡∏á‡πÇ‡∏î‡∏¢",
            "customField23": "Custom Field 23",
            "customField7": "üìû ‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á (‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£)",
            "customField5": "üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà",
            "customField10": "üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô",
            "customField2": "üîß ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢ Network",
            "customField3": "üíª ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢ Hardware",
            "customField9": "‚ö° ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô",
            "customField25": "üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î"
        }
        
        for field, value in custom_fields.items():
            field_name = field_names.get(field, field)
            if value and str(value).strip():
                print_key_value(field_name, str(value))
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Custom Options
    if custom_options:
        print_section_header("‚öôÔ∏è CUSTOM OPTIONS", Colors.MAGENTA)
        option_names = {
            "customField2": "üîß ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢ Network",
            "customField3": "üíª ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢ Hardware",
            "customField9": "‚ö° ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô"
        }
        
        for field, option in custom_options.items():
            option_name = option_names.get(field, field)
            print(f"\n{Colors.BOLD}{option_name}:{Colors.END}")
            
            # ‡πÅ‡∏™‡∏î‡∏á title ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            if option.get('title') and str(option['title']).strip():
                print(f"  {Colors.CYAN}üìã Title:{Colors.END} {option['title']}")
            
            # ‡πÅ‡∏™‡∏î‡∏á value ‡πÄ‡∏™‡∏°‡∏≠‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if option.get('value') and str(option['value']).strip():
                print(f"  {Colors.GREEN}üî∏ Value:{Colors.END} {option['value']}")
            elif not option.get('title') or not str(option.get('title', '')).strip():
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ title ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ value ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
                print(f"  {Colors.YELLOW}‚ö†Ô∏è  No data available{Colors.END}")
    else:
        print(f"\n{Colors.YELLOW}‚ÑπÔ∏è No custom options found.{Colors.END}")

def print_activities(client: OpenProjectClient, work_package_id: int):
    """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Activities ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢"""
    print_section_header("üìú ACTIVITY HISTORY", Colors.GREEN)
    
    activities = client.get_activities(work_package_id)
    if not activities:
        print(f"{Colors.RED}‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Activities ‡πÑ‡∏î‡πâ{Colors.END}")
        return []
    
    print(f"\n{Colors.BOLD}üìä Total Activities: {len(activities)}{Colors.END}\n")
    
    for idx, activity in enumerate(activities, 1):
        print(f"{Colors.CYAN}{'‚îÄ' * 80}{Colors.END}")
        print(f"{Colors.BOLD}{Colors.CYAN}Activity #{idx}{Colors.END}")
        print(f"{Colors.CYAN}{'‚îÄ' * 80}{Colors.END}")
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        user_link = safe_get(activity, '_links', 'user')
        user_name = client.get_user_name(user_link)
        created_at = format_date(safe_get(activity, 'createdAt'))
        
        print(f"{Colors.BOLD}ÔøΩÔøΩ User:{Colors.END} {Colors.CYAN}{user_name}{Colors.END}")
        print(f"{Colors.BOLD}üìÖ Created:{Colors.END} {Colors.GREEN}{created_at}{Colors.END}")
        
        # ‡πÅ‡∏™‡∏î‡∏á Comment ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        comment_raw = safe_get(activity, 'comment', 'raw')
        comment_html = safe_get(activity, 'comment', 'html')
        
        if comment_raw and comment_raw != "N/A":
            print(f"\n{Colors.BOLD}üí¨ Comment:{Colors.END}")
            print(f"  {Colors.YELLOW}{comment_raw}{Colors.END}")
        elif comment_html and comment_html != "N/A":
            comment_text = clean_html(comment_html)
            if comment_text:
                print(f"\n{Colors.BOLD}üí¨ Comment:{Colors.END}")
                print(f"  {Colors.YELLOW}{comment_text}{Colors.END}")
        
        # ‡πÅ‡∏™‡∏î‡∏á Changes ‡∏à‡∏≤‡∏Å details
        details = safe_get(activity, 'details', default=[])
        if details:
            print(f"\n{Colors.BOLD}üîÑ Changes:{Colors.END}")
            for detail in details:
                html_text = safe_get(detail, 'html')
                if html_text and html_text != "N/A":
                    # ‡∏•‡∏ö HTML tags ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
                    clean_text = clean_html(html_text)
                    if clean_text:
                        print(f"  {Colors.BLUE}‚Ä¢{Colors.END} {clean_text}")
        
        print()  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏á
    
    return activities

def display_complete_work_package_data(client: OpenProjectClient, work_package_id: int):
    """‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Work Package ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á Custom Fields ‡πÅ‡∏•‡∏∞ Activities"""
    work_package = client.get_work_package(work_package_id)
    if not work_package:
        logger.error("No work package data to display")
        return
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Å‡πà‡∏≠‡∏ô
    print_overview(work_package)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡∏•‡∏±‡∏Å
    print_work_package_details(work_package)
    
    # ‡πÅ‡∏™‡∏î‡∏á Custom Fields ‡πÅ‡∏•‡∏∞ Custom Options
    print_custom_fields_and_options(client, work_package)
    
    # ‡πÅ‡∏™‡∏î‡∏á Activities
    activities = print_activities(client, work_package_id)
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ó‡πâ‡∏≤‡∏¢
    print_section_header("‚úÖ SUMMARY COMPLETE", Colors.GREEN)
    print(f"{Colors.BOLD}üéâ Successfully displayed complete work package information!{Colors.END}")
    print(f"{Colors.BOLD}üìã Work Package ID:{Colors.END} {work_package_id}")
    print(f"{Colors.BOLD}üìä Total Activities:{Colors.END} {len(activities) if activities else 0}")

if __name__ == "__main__":
    try:
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        load_dotenv()
        
        # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å environment variables (‡πÑ‡∏°‡πà‡∏°‡∏µ default hardcoded)
        OPENPROJECT_URL = os.getenv("OPENPROJECT_URL")
        OPENPROJECT_API_KEY = os.getenv("OPENPROJECT_API_KEY")
        WORK_PACKAGE_ID_STR = os.getenv("WORK_PACKAGE_ID")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏µ‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not OPENPROJECT_URL:
            raise ValueError("OPENPROJECT_URL is required. Set it in .env file or environment variable.")
        if not OPENPROJECT_API_KEY:
            raise ValueError("OPENPROJECT_API_KEY is required. Set it in .env file or environment variable.")
        if not WORK_PACKAGE_ID_STR:
            raise ValueError("WORK_PACKAGE_ID is required. Set it in .env file or environment variable.")
        
        try:
            WORK_PACKAGE_ID = int(WORK_PACKAGE_ID_STR)
        except ValueError:
            raise ValueError(f"WORK_PACKAGE_ID must be an integer, got: {WORK_PACKAGE_ID_STR}")

        print(f"üîß Starting OpenProject data fetcher...")
        print(f"üåê API URL: {OPENPROJECT_URL}")
        print(f"üìã Work Package ID: {WORK_PACKAGE_ID}")
        
        logger.info("Starting OpenProject data fetcher")
        logger.info(f"Using API URL: {OPENPROJECT_URL}")
        logger.info(f"Work Package ID: {WORK_PACKAGE_ID}")

        client = OpenProjectClient(OPENPROJECT_URL, OPENPROJECT_API_KEY)
        display_complete_work_package_data(client, WORK_PACKAGE_ID)

        logger.info("Finished processing")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        logger.error(f"Main execution error: {e}")
        import traceback
        traceback.print_exc()
